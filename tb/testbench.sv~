
	//`include "design.v"
      `include "uvm_macros.svh"
        `include "interface.sv"
import uvm_pkg::*;
        `include "m_conf.sv"

        `include "m_seq_item.sv"
	`include "m_sequence.sv"
        `include "m_sequencer_t.sv"
	`include "m_driver.sv"
        `include "m_monitor.sv"
	`include "m_agent.sv"
	`include "scoreboard.sv"
	`include "env.sv"
        `include "test.sv"

	

module tb_top;
reg clk, rst_n;

  apb_slave dut(
    .clk(intf.clk),
    .rst_n(intf.rst_n),
    .paddr(intf.paddr),
    .pwrite(intf.pwrite),
    .psel(intf.psel),
    .penable(intf.penable),
    .pwdata(intf.pwdata),
    .prdata(intf.prdata)); //dut instantation

  apb_intf intf(clk, rst_n); //interface handle
  
  initial begin
	  clk=0;
	  forever #5 clk=~clk;
  end

  initial begin
	rst_n = 0;
   	repeat(2) @(posedge clk)
	rst_n=1;
  end
/*

Create a test cases 

1. Write only 
2.read only 
3. Write followed by Read ( WR WR WR WR) 
4.random write and reads ( WRWWWRRWW )
5.write with wait states 
6.Write Read with wiar states.
			
*/


  initial begin

	  uvm_config_db#(virtual apb_intf)::set(null,"*","vif",intf);  //config db set_up
  
        //  run_test("apb_test"); 	// make test
	  
//	  run_test("wrt_only"); 	// make test1
//	  run_test("rd_only");  	// make test2
//	  run_test("wrt_fldb_rd"); 	// make test3
	  run_test("rnd_wrt");     	// make test4
	// run_test("wrt_wit_wait_st");
	// run_test("wrt_rd_wit_st")
  end
endmodule
 
