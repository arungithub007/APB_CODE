
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// </q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// Testcase is a pattern to check and verify specific features and functionalities of a design.</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// A verification plan lists all the features and other functional items that needs to be verified, and the tests neeeded to cover each of them.</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>// where we want to hold the simulation for a specific time, it is mandatory that you raise and drop an objection</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a><q-w>class</q-w> apb_test <q-w>extends</q-w> uvm_test;   <q-m>//base test</q-m>
<a name="10"><q-n>     10  </q-n></a>  `uvm_component_utils(apb_test)
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a>   apb_mas_conf m_conf;
<a name="13"><q-n>     13  </q-n></a>   apb_env env;
<a name="14"><q-n>     14  </q-n></a>   apb_mas_sequence seq;
<a name="15"><q-n>     15  </q-n></a>  <q-w>virtual</q-w>  apb_intf vif;
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>  <q-w>bit</q-w>[0:31] i,j;
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a><q-m>/*    //conf file insert_wait_cycle state on=1,off=0</q-m>
<a name="20"><q-n>     20  </q-n></a><q-m>  bit insert_wait_cycle=1'b1;</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m></q-m>
<a name="22"><q-n>     22  </q-n></a><q-m>  //conf file for number of wait cycle</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>  int num_wait_cycle=2;</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m></q-m>
<a name="25"><q-n>     25  </q-n></a><q-m>//call the below funtion in the buildphase of child classes of apb_test(base test)</q-m>
<a name="26"><q-n>     26  </q-n></a><q-m></q-m>
<a name="27"><q-n>     27  </q-n></a><q-m> virtual function flag();</q-m>
<a name="28"><q-n>     28  </q-n></a><q-m>      m_conf=new();</q-m>
<a name="29"><q-n>     29  </q-n></a><q-m>      m_conf.insert_wait_cycle=insert_wait_cycle;</q-m>
<a name="30"><q-n>     30  </q-n></a><q-m>      m_conf.num_wait_cycle=num_wait_cycle;</q-m>
<a name="31"><q-n>     31  </q-n></a><q-m>  endfunction:flag</q-m>
<a name="32"><q-n>     32  </q-n></a><q-m></q-m>
<a name="33"><q-n>     33  </q-n></a><q-m>*/</q-m>
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a><q-m>//constuctor function</q-m>
<a name="36"><q-n>     36  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"apb_test"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="37"><q-n>     37  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="38"><q-n>     38  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a> <q-m>//buid phase</q-m>
<a name="41"><q-n>     41  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="42"><q-n>     42  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="43"><q-n>     43  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="44"><q-n>     44  </q-n></a>  env = apb_env::type_id::create(<q-l>"env"</q-l>, <q-w>this</q-w>);
<a name="45"><q-n>     45  </q-n></a>  seq = apb_mas_sequence::type_id::create(<q-l>"seq"</q-l>,<q-w>this</q-w>);
<a name="46"><q-n>     46  </q-n></a> 
<a name="47"><q-n>     47  </q-n></a>  <q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> apb_intf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"vif"</q-l>,vif))<q-w>begin</q-w>
<a name="48"><q-n>     48  </q-n></a>      `uvm_fatal(<q-l>"NO_VIF"</q-l>,{<q-l>" virtual interface must be set for:"</q-l>,get_full_name(),<q-l>".vif"</q-l>});
<a name="49"><q-n>     49  </q-n></a>  <q-w>end</q-w>
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="52"><q-n>     52  </q-n></a> uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="53"><q-n>     53  </q-n></a> <q-w>endfunction</q-w> : build_phase
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a> <q-w>function</q-w> <q-w>void</q-w> end_of_elaboration_phase(uvm_phase phase);
<a name="56"><q-n>     56  </q-n></a>     <q-w>super</q-w>.end_of_elaboration_phase(phase);
<a name="57"><q-n>     57  </q-n></a>     uvm_top.print_topology();
<a name="58"><q-n>     58  </q-n></a> <q-w>endfunction</q-w>:end_of_elaboration_phase
<a name="59"><q-n>     59  </q-n></a>  
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a> <q-m>//////////////////////////////////////////////////////////////////////////</q-m>
<a name="63"><q-n>     63  </q-n></a> <q-m>//</q-m>
<a name="64"><q-n>     64  </q-n></a> <q-m>//run phase:=</q-m>
<a name="65"><q-n>     65  </q-n></a> <q-m>//where we want to hold the simulation for a specific time, it is mandatory that you raise and drop an objecton</q-m>
<a name="66"><q-n>     66  </q-n></a> <q-m>//</q-m>
<a name="67"><q-n>     67  </q-n></a> <q-m>//////////////////////////////////////////////////////////////////////////</q-m>
<a name="68"><q-n>     68  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="69"><q-n>     69  </q-n></a>	   phase.raise_objection(<q-w>this</q-w>);
<a name="70"><q-n>     70  </q-n></a>	   seq.start(env.agnt1[0].mas_sequencer);  <q-m>//to start a sequnce in a agent we need to take the sequence name start from the accecing the sequencer handle from agent </q-m>
<a name="71"><q-n>     71  </q-n></a>   #50;
<a name="72"><q-n>     72  </q-n></a>    phase.drop_objection(<q-w>this</q-w>);
<a name="73"><q-n>     73  </q-n></a>    
<a name="74"><q-n>     74  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="75"><q-n>     75  </q-n></a>  
<a name="76"><q-n>     76  </q-n></a> <q-w>endclass</q-w> :apb_test
<a name="77"><q-n>     77  </q-n></a>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a> <q-m>/*</q-m>
<a name="80"><q-n>     80  </q-n></a><q-m> </q-m>
<a name="81"><q-n>     81  </q-n></a><q-m>Create a test cases </q-m>
<a name="82"><q-n>     82  </q-n></a><q-m></q-m>
<a name="83"><q-n>     83  </q-n></a><q-m>1. Write only </q-m>
<a name="84"><q-n>     84  </q-n></a><q-m>2.read only </q-m>
<a name="85"><q-n>     85  </q-n></a><q-m>3. Write followed by Read ( WR WR WR WR) </q-m>
<a name="86"><q-n>     86  </q-n></a><q-m>4.random write and reads ( WRWWWRRWW )</q-m>
<a name="87"><q-n>     87  </q-n></a><q-m>5.write with wait states </q-m>
<a name="88"><q-n>     88  </q-n></a><q-m>6.Write Read withwiarstates.</q-m>
<a name="89"><q-n>     89  </q-n></a><q-m>			</q-m>
<a name="90"><q-n>     90  </q-n></a><q-m>*/</q-m>
<a name="91"><q-n>     91  </q-n></a>
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a><q-m>////////////////////////  write only  test1 ////////////////////////</q-m>
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a><q-w>class</q-w> wrt_only <q-w>extends</q-w> uvm_test;   <q-m>//write only extends from apb_test i.e.,base test</q-m>
<a name="96"><q-n>     96  </q-n></a>  `uvm_component_utils(wrt_only)
<a name="97"><q-n>     97  </q-n></a>
<a name="98"><q-n>     98  </q-n></a>   apb_mas_conf m_conf;
<a name="99"><q-n>     99  </q-n></a>   apb_env env;
<a name="100"><q-n>     100  </q-n></a>   apb_mas_sequence1 seq1;
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a><q-m>//constuctor function</q-m>
<a name="103"><q-n>     103  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"wrt_only"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="104"><q-n>     104  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="105"><q-n>     105  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a> <q-m>//buid phase</q-m>
<a name="108"><q-n>     108  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="109"><q-n>     109  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="110"><q-n>     110  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="111"><q-n>     111  </q-n></a>  env = apb_env::type_id::create(<q-l>"env"</q-l>, <q-w>this</q-w>);
<a name="112"><q-n>     112  </q-n></a>  seq1 = apb_mas_sequence1::type_id::create(<q-l>"seq1"</q-l>,<q-w>this</q-w>);
<a name="113"><q-n>     113  </q-n></a> 
<a name="114"><q-n>     114  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="115"><q-n>     115  </q-n></a>uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="116"><q-n>     116  </q-n></a> <q-w>endfunction</q-w> : build_phase
<a name="117"><q-n>     117  </q-n></a>  
<a name="118"><q-n>     118  </q-n></a> <q-m>//run phase</q-m>
<a name="119"><q-n>     119  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="120"><q-n>     120  </q-n></a>	   phase.raise_objection(<q-w>this</q-w>);
<a name="121"><q-n>     121  </q-n></a>	   seq1.start(env.agnt1[0].mas_sequencer);
<a name="122"><q-n>     122  </q-n></a>   #50;
<a name="123"><q-n>     123  </q-n></a>    phase.drop_objection(<q-w>this</q-w>);
<a name="124"><q-n>     124  </q-n></a>    
<a name="125"><q-n>     125  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="126"><q-n>     126  </q-n></a>  
<a name="127"><q-n>     127  </q-n></a> <q-w>endclass</q-w> :wrt_only
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>
<a name="130"><q-n>     130  </q-n></a>
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>
<a name="134"><q-n>     134  </q-n></a>
<a name="135"><q-n>     135  </q-n></a>
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a><q-m>/////////////// read only test2 /////////////////</q-m>
<a name="138"><q-n>     138  </q-n></a><q-m>//</q-m>
<a name="139"><q-n>     139  </q-n></a><q-m>// "$root" is a SystemVerilog construct representing the top of the static elaborated module/interface hierarchy.</q-m>
<a name="140"><q-n>     140  </q-n></a><q-m>// This hierarchy gets constructed as part of elaboration stage of the compiler and executes before any simulation starts running.</q-m>
<a name="141"><q-n>     141  </q-n></a><q-m>//</q-m>
<a name="142"><q-n>     142  </q-n></a><q-m>/////////////////////////////////////////////////</q-m>
<a name="143"><q-n>     143  </q-n></a><q-w>class</q-w> rd_only <q-w>extends</q-w> apb_test;   <q-m>//read only extends from uvm_test</q-m>
<a name="144"><q-n>     144  </q-n></a>  `uvm_component_utils(rd_only)
<a name="145"><q-n>     145  </q-n></a>   apb_mas_conf m_conf;
<a name="146"><q-n>     146  </q-n></a>   apb_mas_sequence2 seq2;
<a name="147"><q-n>     147  </q-n></a>
<a name="148"><q-n>     148  </q-n></a><q-m>//constuctor function</q-m>
<a name="149"><q-n>     149  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"wrt_only"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="150"><q-n>     150  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="151"><q-n>     151  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="152"><q-n>     152  </q-n></a>
<a name="153"><q-n>     153  </q-n></a> <q-m>//buid phase</q-m>
<a name="154"><q-n>     154  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="155"><q-n>     155  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="156"><q-n>     156  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="157"><q-n>     157  </q-n></a>  seq2 = apb_mas_sequence2::type_id::create(<q-l>"seq2"</q-l>,<q-w>this</q-w>);
<a name="158"><q-n>     158  </q-n></a> 
<a name="159"><q-n>     159  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="160"><q-n>     160  </q-n></a>uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="161"><q-n>     161  </q-n></a> <q-w>endfunction</q-w> : build_phase
<a name="162"><q-n>     162  </q-n></a>  
<a name="163"><q-n>     163  </q-n></a> <q-m>//run phase</q-m>
<a name="164"><q-n>     164  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="165"><q-n>     165  </q-n></a>	   phase.raise_objection(<q-w>this</q-w>);
<a name="166"><q-n>     166  </q-n></a>       <q-w>for</q-w>(i=0,j=255;i&lt;255;i++,j--)
<a name="167"><q-n>     167  </q-n></a>         $root.tb_top.dut.mem[i]=j;
<a name="168"><q-n>     168  </q-n></a>	   seq2.start(env.agnt1[0].mas_sequencer);
<a name="169"><q-n>     169  </q-n></a>   #50;
<a name="170"><q-n>     170  </q-n></a>    phase.drop_objection(<q-w>this</q-w>);
<a name="171"><q-n>     171  </q-n></a>    
<a name="172"><q-n>     172  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="173"><q-n>     173  </q-n></a>  
<a name="174"><q-n>     174  </q-n></a> <q-w>endclass</q-w> :rd_only
<a name="175"><q-n>     175  </q-n></a>
<a name="176"><q-n>     176  </q-n></a>
<a name="177"><q-n>     177  </q-n></a>
<a name="178"><q-n>     178  </q-n></a>
<a name="179"><q-n>     179  </q-n></a>
<a name="180"><q-n>     180  </q-n></a>
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a><q-m>/////////////////  Write followed by Read ( WR WR WR WR) testname=wrt_fldb_rd test3 ///////////////////</q-m>
<a name="183"><q-n>     183  </q-n></a>
<a name="184"><q-n>     184  </q-n></a>
<a name="185"><q-n>     185  </q-n></a><q-w>class</q-w> wrt_fldb_rd <q-w>extends</q-w> uvm_test;   <q-m>//read only extends from uvm_test</q-m>
<a name="186"><q-n>     186  </q-n></a>  `uvm_component_utils(wrt_fldb_rd)
<a name="187"><q-n>     187  </q-n></a>
<a name="188"><q-n>     188  </q-n></a>   apb_mas_conf m_conf;
<a name="189"><q-n>     189  </q-n></a>   apb_env env;
<a name="190"><q-n>     190  </q-n></a>   apb_mas_sequence3 seq3;
<a name="191"><q-n>     191  </q-n></a>
<a name="192"><q-n>     192  </q-n></a><q-m>//constuctor function</q-m>
<a name="193"><q-n>     193  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"wrt_fldb_rd"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="194"><q-n>     194  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="195"><q-n>     195  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="196"><q-n>     196  </q-n></a>
<a name="197"><q-n>     197  </q-n></a> <q-m>//buid phase</q-m>
<a name="198"><q-n>     198  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="199"><q-n>     199  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="200"><q-n>     200  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="201"><q-n>     201  </q-n></a>  env = apb_env::type_id::create(<q-l>"env"</q-l>, <q-w>this</q-w>);
<a name="202"><q-n>     202  </q-n></a>  seq3 = apb_mas_sequence3::type_id::create(<q-l>"seq3"</q-l>,<q-w>this</q-w>);
<a name="203"><q-n>     203  </q-n></a> 
<a name="204"><q-n>     204  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="205"><q-n>     205  </q-n></a>uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="206"><q-n>     206  </q-n></a> <q-w>endfunction</q-w> : build_phase
<a name="207"><q-n>     207  </q-n></a>  
<a name="208"><q-n>     208  </q-n></a> <q-m>//run phase</q-m>
<a name="209"><q-n>     209  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="210"><q-n>     210  </q-n></a>	   phase.raise_objection(<q-w>this</q-w>);
<a name="211"><q-n>     211  </q-n></a>	   seq3.start(env.agnt1[0].mas_sequencer);
<a name="212"><q-n>     212  </q-n></a>   #50;
<a name="213"><q-n>     213  </q-n></a>    phase.drop_objection(<q-w>this</q-w>);
<a name="214"><q-n>     214  </q-n></a>    
<a name="215"><q-n>     215  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="216"><q-n>     216  </q-n></a>  
<a name="217"><q-n>     217  </q-n></a> <q-w>endclass</q-w> :wrt_fldb_rd
<a name="218"><q-n>     218  </q-n></a>
<a name="219"><q-n>     219  </q-n></a>
<a name="220"><q-n>     220  </q-n></a>
<a name="221"><q-n>     221  </q-n></a>
<a name="222"><q-n>     222  </q-n></a>
<a name="223"><q-n>     223  </q-n></a>
<a name="224"><q-n>     224  </q-n></a>
<a name="225"><q-n>     225  </q-n></a>
<a name="226"><q-n>     226  </q-n></a>
<a name="227"><q-n>     227  </q-n></a>
<a name="228"><q-n>     228  </q-n></a><q-m>///////////////////// random write and reads ( WRWWWRRWW ) rnd_wrt_rd test4///////////////////</q-m>
<a name="229"><q-n>     229  </q-n></a>
<a name="230"><q-n>     230  </q-n></a><q-w>class</q-w> rnd_wrt_rd <q-w>extends</q-w> uvm_test;   <q-m>//read only extends from uvm_test</q-m>
<a name="231"><q-n>     231  </q-n></a>  `uvm_component_utils(rnd_wrt_rd)
<a name="232"><q-n>     232  </q-n></a>
<a name="233"><q-n>     233  </q-n></a>   apb_mas_conf m_conf;
<a name="234"><q-n>     234  </q-n></a>   apb_env env;
<a name="235"><q-n>     235  </q-n></a>   apb_mas_sequence4 seq4;
<a name="236"><q-n>     236  </q-n></a>
<a name="237"><q-n>     237  </q-n></a><q-m>//constuctor function</q-m>
<a name="238"><q-n>     238  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"rnd_wrt_rd"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="239"><q-n>     239  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="240"><q-n>     240  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="241"><q-n>     241  </q-n></a>
<a name="242"><q-n>     242  </q-n></a> <q-m>//buid phase</q-m>
<a name="243"><q-n>     243  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="244"><q-n>     244  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="245"><q-n>     245  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="246"><q-n>     246  </q-n></a>  env = apb_env::type_id::create(<q-l>"env"</q-l>, <q-w>this</q-w>);
<a name="247"><q-n>     247  </q-n></a>  seq4 = apb_mas_sequence4::type_id::create(<q-l>"seq4"</q-l>,<q-w>this</q-w>);
<a name="248"><q-n>     248  </q-n></a> 
<a name="249"><q-n>     249  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="250"><q-n>     250  </q-n></a>uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="251"><q-n>     251  </q-n></a> <q-w>endfunction</q-w> : build_phase
<a name="252"><q-n>     252  </q-n></a>  
<a name="253"><q-n>     253  </q-n></a> <q-m>//run phase</q-m>
<a name="254"><q-n>     254  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="255"><q-n>     255  </q-n></a>	   phase.raise_objection(<q-w>this</q-w>);
<a name="256"><q-n>     256  </q-n></a>	   seq4.start(env.agnt1[0].mas_sequencer);
<a name="257"><q-n>     257  </q-n></a>   #50;
<a name="258"><q-n>     258  </q-n></a>       phase.drop_objection(<q-w>this</q-w>);
<a name="259"><q-n>     259  </q-n></a>    
<a name="260"><q-n>     260  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="261"><q-n>     261  </q-n></a>  
<a name="262"><q-n>     262  </q-n></a> <q-w>endclass</q-w> :rnd_wrt_rd
<a name="263"><q-n>     263  </q-n></a>
<a name="264"><q-n>     264  </q-n></a>
<a name="265"><q-n>     265  </q-n></a>
<a name="266"><q-n>     266  </q-n></a>
<a name="267"><q-n>     267  </q-n></a>
<a name="268"><q-n>     268  </q-n></a>
<a name="269"><q-n>     269  </q-n></a>
<a name="270"><q-n>     270  </q-n></a><q-m>/////////////////////// write read with wait states tetst5 run_test("wrt_rd_wit_st"); ///////////////////////</q-m>
<a name="271"><q-n>     271  </q-n></a>
<a name="272"><q-n>     272  </q-n></a><q-w>class</q-w> wrt_rd_wit_st <q-w>extends</q-w> uvm_test;   <q-m>//base test</q-m>
<a name="273"><q-n>     273  </q-n></a>  `uvm_component_utils(wrt_rd_wit_st)
<a name="274"><q-n>     274  </q-n></a>
<a name="275"><q-n>     275  </q-n></a>   apb_mas_conf m_conf;
<a name="276"><q-n>     276  </q-n></a>   apb_env env;
<a name="277"><q-n>     277  </q-n></a>   apb_mas_sequence5 seq5;
<a name="278"><q-n>     278  </q-n></a><q-w>virtual</q-w> apb_intf vif;
<a name="279"><q-n>     279  </q-n></a>
<a name="280"><q-n>     280  </q-n></a>
<a name="281"><q-n>     281  </q-n></a>
<a name="282"><q-n>     282  </q-n></a><q-w>function</q-w> <q-w>void</q-w> conff();
<a name="283"><q-n>     283  </q-n></a>  <q-m>//conf file insert_wait_cycle state on=1,off=0</q-m>
<a name="284"><q-n>     284  </q-n></a>  <q-w>bit</q-w> insert_wait_cycle=1'b1;
<a name="285"><q-n>     285  </q-n></a>
<a name="286"><q-n>     286  </q-n></a>  <q-m>//conf file for number of wait cycle</q-m>
<a name="287"><q-n>     287  </q-n></a>  <q-w>int</q-w> num_wait_cycle=2;
<a name="288"><q-n>     288  </q-n></a> 
<a name="289"><q-n>     289  </q-n></a>      m_conf=<q-w>new</q-w>();
<a name="290"><q-n>     290  </q-n></a>      m_conf.insert_wait_cycle=insert_wait_cycle;
<a name="291"><q-n>     291  </q-n></a>      m_conf.num_wait_cycle=num_wait_cycle;
<a name="292"><q-n>     292  </q-n></a>  <q-w>endfunction</q-w>:conff 
<a name="293"><q-n>     293  </q-n></a>      
<a name="294"><q-n>     294  </q-n></a>       <q-w>task</q-w> wait_state();
<a name="295"><q-n>     295  </q-n></a>    <q-m>//incertiing wiat state in read data</q-m>
<a name="296"><q-n>     296  </q-n></a>          @(<q-a>posedge</q-w> vif.clk);
<a name="297"><q-n>     297  </q-n></a>
<a name="298"><q-n>     298  </q-n></a>        <q-w>if</q-w> (m_conf.insert_wait_cycle) <q-w>begin</q-w>
<a name="299"><q-n>     299  </q-n></a>           <q-w>repeat</q-w> (m_conf.num_wait_cycle);
<a name="300"><q-n>     300  </q-n></a>        <q-w>begin</q-w> 
<a name="301"><q-n>     301  </q-n></a>        <q-m>// force the wait state  @(posedge vif.clk);</q-m>
<a name="302"><q-n>     302  </q-n></a>            <q-w>force</q-w> tb_top.dut.pready=0;
<a name="303"><q-n>     303  </q-n></a>        <q-w>end</q-w>
<a name="304"><q-n>     304  </q-n></a>           @(<q-a>posedge</q-w> vif.clk);
<a name="305"><q-n>     305  </q-n></a>            <q-w>release</q-w> tb_top.dut.pready;
<a name="306"><q-n>     306  </q-n></a>        <q-w>end</q-w>
<a name="307"><q-n>     307  </q-n></a>  
<a name="308"><q-n>     308  </q-n></a>    <q-w>endtask</q-w>:wait_state
<a name="309"><q-n>     309  </q-n></a>
<a name="310"><q-n>     310  </q-n></a>
<a name="311"><q-n>     311  </q-n></a><q-m>//constuctor function</q-m>
<a name="312"><q-n>     312  </q-n></a> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"wrt_rd_wit_st"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="313"><q-n>     313  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="314"><q-n>     314  </q-n></a> <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="315"><q-n>     315  </q-n></a>
<a name="316"><q-n>     316  </q-n></a> <q-m>//buid phase</q-m>
<a name="317"><q-n>     317  </q-n></a> <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="318"><q-n>     318  </q-n></a>   <q-w>super</q-w>.build_phase(phase);
<a name="319"><q-n>     319  </q-n></a>  m_conf=apb_mas_conf::type_id::create(<q-l>"m_conf"</q-l>,<q-w>this</q-w>);
<a name="320"><q-n>     320  </q-n></a>  env = apb_env::type_id::create(<q-l>"env"</q-l>, <q-w>this</q-w>);
<a name="321"><q-n>     321  </q-n></a>  seq5 = apb_mas_sequence5::type_id::create(<q-l>"seq5"</q-l>,<q-w>this</q-w>);
<a name="322"><q-n>     322  </q-n></a>  conff();
<a name="323"><q-n>     323  </q-n></a>  <q-m>//get  virtual interface </q-m>
<a name="324"><q-n>     324  </q-n></a>  <q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> apb_intf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"vif"</q-l>,vif))<q-w>begin</q-w>
<a name="325"><q-n>     325  </q-n></a>      `uvm_fatal(<q-l>"NO_VIF"</q-l>,{<q-l>" virtual interface must be set for:"</q-l>,get_full_name(),<q-l>".vif"</q-l>});
<a name="326"><q-n>     326  </q-n></a>  <q-w>end</q-w>
<a name="327"><q-n>     327  </q-n></a>
<a name="328"><q-n>     328  </q-n></a>  <q-m>//setting mas_conf in buid phase of the base test</q-m>
<a name="329"><q-n>     329  </q-n></a>  uvm_config_db#(apb_mas_conf)::set(<q-w>null</q-w>,<q-l>"*"</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf);
<a name="330"><q-n>     330  </q-n></a>  <q-w>endfunction</q-w> : build_phase
<a name="331"><q-n>     331  </q-n></a>
<a name="332"><q-n>     332  </q-n></a> 
<a name="333"><q-n>     333  </q-n></a>  
<a name="334"><q-n>     334  </q-n></a> <q-m>//run phase</q-m>
<a name="335"><q-n>     335  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="336"><q-n>     336  </q-n></a>     
<a name="337"><q-n>     337  </q-n></a>	  phase.raise_objection(<q-w>this</q-w>);
<a name="338"><q-n>     338  </q-n></a>     <q-w>fork</q-w>
<a name="339"><q-n>     339  </q-n></a>     <q-w>begin</q-w> 
<a name="340"><q-n>     340  </q-n></a>     #20 wait_state();
<a name="341"><q-n>     341  </q-n></a>     #20 wait_state();
<a name="342"><q-n>     342  </q-n></a>     #20 wait_state(); 
<a name="343"><q-n>     343  </q-n></a>     <q-w>end</q-w> 
<a name="344"><q-n>     344  </q-n></a>      seq5.start(env.agnt1[0].mas_sequencer);
<a name="345"><q-n>     345  </q-n></a>      #50;
<a name="346"><q-n>     346  </q-n></a>     <q-w>join</q-w> 
<a name="347"><q-n>     347  </q-n></a>      phase.drop_objection(<q-w>this</q-w>);
<a name="348"><q-n>     348  </q-n></a>     
<a name="349"><q-n>     349  </q-n></a>    
<a name="350"><q-n>     350  </q-n></a>   <q-w>endtask</q-w> : run_phase
<a name="351"><q-n>     351  </q-n></a>  
<a name="352"><q-n>     352  </q-n></a> <q-w>endclass</q-w> :wrt_rd_wit_st
<a name="353"><q-n>     353  </q-n></a>
<a name="354"><q-n>     354  </q-n></a>
<a name="355"><q-n>     355  </q-n></a>
<a name="356"><q-n>     356  </q-n></a>
<a name="357"><q-n>     357  </q-n></a>
<a name="358"><q-n>     358  </q-n></a>
<a name="359"><q-n>     359  </q-n></a>
<a name="360"><q-n>     360  </q-n></a>
<a name="361"><q-n>     361  </q-n></a><q-m>///////////////////////// Write withwiatstates ////////////////////////////</q-m>
<a name="362"><q-n>     362  </q-n></a>
<a name="363"><q-n>     363  </q-n></a>
<a name="364"><q-n>     364  </q-n></a>
<a name="365"><q-n>     365  </q-n></a>
<a name="366"><q-n>     366  </q-n></a><q-m>///////////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="367"><q-n>     367  </q-n></a><q-m>//notes:=</q-m>
<a name="368"><q-n>     368  </q-n></a><q-m>//So this is how you hold the simulator.</q-m>
<a name="369"><q-n>     369  </q-n></a>
<a name="370"><q-n>     370  </q-n></a><q-m>//the next question is you have a multiple component.</q-m>
<a name="371"><q-n>     371  </q-n></a><q-m>//</q-m>
<a name="372"><q-n>     372  </q-n></a><q-m>//So each of the component could add the trees and drop objection.</q-m>
<a name="373"><q-n>     373  </q-n></a><q-m>//</q-m>
<a name="374"><q-n>     374  </q-n></a><q-m>//And then simulator will automatically count the number of objections that are raised.</q-m>
<a name="375"><q-n>     375  </q-n></a><q-m>//</q-m>
<a name="376"><q-n>     376  </q-n></a><q-m>//And once all of the objections are dropped similarly to will exit, right.</q-m>
<a name="377"><q-n>     377  </q-n></a><q-m>//</q-m>
<a name="378"><q-n>     378  </q-n></a><q-m>//So usually we do not add the objection in all of a component that exist in our environment instead.</q-m>
<a name="379"><q-n>     379  </q-n></a><q-m>//</q-m>
<a name="380"><q-n>     380  </q-n></a><q-m>//We use the reason drop objection in a sequences.</q-m>
<a name="381"><q-n>     381  </q-n></a><q-m>//</q-m>
<a name="382"><q-n>     382  </q-n></a><q-m>//So as we proceed to the sequence section, we'll be understanding more on this.</q-m>
<a name="383"><q-n>     383  </q-n></a><q-m>//</q-m>
<a name="384"><q-n>     384  </q-n></a><q-m>//Right.</q-m>
<a name="385"><q-n>     385  </q-n></a><q-m>//</q-m>
<a name="386"><q-n>     386  </q-n></a><q-m>//But something that you could take away from this is whenever you want to hold your simulator for the</q-m>
<a name="387"><q-n>     387  </q-n></a><q-m>//</q-m>
<a name="388"><q-n>     388  </q-n></a><q-m>//specific time, time could be anything.</q-m>
<a name="389"><q-n>     389  </q-n></a><q-m>//</q-m>
<a name="390"><q-n>     390  </q-n></a><q-m>//Then it is mandatory that you need to raise an objection, complete your task, specify the time for</q-m>
<a name="391"><q-n>     391  </q-n></a><q-m>//</q-m>
<a name="392"><q-n>     392  </q-n></a><q-m>//which you want to execute the task, and then you drop an objection.</q-m>
<a name="393"><q-n>     393  </q-n></a><q-m>//</q-m>
<a name="394"><q-n>     394  </q-n></a><q-m>//So this allow an entire process to complete as expected.</q-m>
<a name="395"><q-n>     395  </q-n></a><q-m>//</q-m>
<a name="396"><q-n>     396  </q-n></a><q-m>//information</q-m>
</pre>
</tt>

  
</body>
</html>
