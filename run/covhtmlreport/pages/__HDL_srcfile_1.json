var g_sourceLines = [
'module apb_slave',
'#(',
'  addrWidth = 8,',
'  dataWidth = 32',
')',
'(',
'  input                        clk,',
'  input                        rst_n,',
'  input        [addrWidth-1:0] paddr,',
'  input                        pwrite,',
'  input                        psel,',
'  input                        penable,',
'  output logic                 pready,',
'  input        [dataWidth-1:0] pwdata,',
'  output logic [dataWidth-1:0] prdata',
');',
'',
'logic [dataWidth-1:0] mem [256];',
'',
'logic [1:0] apb_st;',
'const logic [1:0] SETUP_PHASE = 0;',
'const logic [1:0] W_ENABLE = 1;',
'const logic [1:0] R_ENABLE = 2;',
'',
'// SETUP_PHASE -&gt; ENABLE',
'always @(negedge rst_n or posedge clk) begin',
'  if (rst_n == 0) begin',
'    apb_st &lt;= 0;',
'    prdata &lt;= 0;',
'  end',
'',
'  else begin',
'    case (apb_st)',
'      SETUP_PHASE : begin',
'        // clear the prdata',
'        prdata &lt;= 0;',
'        pready &lt;= 1;',
'        // Move to ENABLE when the psel is asserted',
'        if (psel &amp;&amp; !penable) begin',
'          if (pwrite) begin',
'            apb_st &lt;= W_ENABLE;',
'          end',
'',
'          else begin',
'            apb_st &lt;= R_ENABLE;',
'          end',
'        end',
'      end',
'',
'      W_ENABLE : begin',
'        // write pwdata to memory',
'        if (psel &amp;&amp; penable &amp;&amp; pwrite) begin',
'          mem[paddr] &lt;= pwdata;',
'        end',
'',
'        // return to SETUP_PHASE',
'        apb_st &lt;= SETUP_PHASE;',
'      end',
'',
'      R_ENABLE : begin',
'        // read prdata from memory',
'        if (psel &amp;&amp; penable &amp;&amp; !pwrite) begin',
'          prdata &lt;= mem[paddr];',
'        end',
'',
'        // return to SETUP_PHASE',
'        apb_st &lt;= SETUP_PHASE;',
'      end',
'    endcase',
'  end',
'end ',
'',
'',
'endmodule',
''
];
countinueBuildStmtTable(g_sourceLines);
