
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>class</q-w> apb_mas_monitor <q-w>extends</q-w> uvm_monitor;
<a name="2"><q-n>     2  </q-n></a>  
<a name="3"><q-n>     3  </q-n></a>  <q-w>virtual</q-w> apb_intf vif;
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a>  apb_mas_conf m_conf;
<a name="6"><q-n>     6  </q-n></a>  
<a name="7"><q-n>     7  </q-n></a>  `uvm_component_utils(apb_mas_monitor)
<a name="8"><q-n>     8  </q-n></a>    apb_seq_item req_collected;   
<a name="9"><q-n>     9  </q-n></a>  
<a name="10"><q-n>     10  </q-n></a>  uvm_analysis_port#(apb_seq_item)item_collected_port; <q-m>//analysis port declaration</q-m>
<a name="11"><q-n>     11  </q-n></a>  
<a name="12"><q-n>     12  </q-n></a>  <q-m>//constructor function</q-m>
<a name="13"><q-n>     13  </q-n></a>  <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name,uvm_component parent);
<a name="14"><q-n>     14  </q-n></a>    <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="15"><q-n>     15  </q-n></a>    req_collected=<q-w>new</q-w>();
<a name="16"><q-n>     16  </q-n></a>  <q-w>endfunction</q-w>:<q-w>new</q-w>
<a name="17"><q-n>     17  </q-n></a>  
<a name="18"><q-n>     18  </q-n></a>  <q-m>//buid phase</q-m>
<a name="19"><q-n>     19  </q-n></a>  <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="20"><q-n>     20  </q-n></a>    <q-w>super</q-w>.build_phase(phase);
<a name="21"><q-n>     21  </q-n></a>
<a name="22"><q-n>     22  </q-n></a>        item_collected_port=<q-w>new</q-w>(<q-l>"item_collected_port"</q-l>,<q-w>this</q-w>);
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>    <q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> apb_intf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"vif"</q-l>,vif))
<a name="26"><q-n>     26  </q-n></a>      `uvm_fatal(<q-l>"NOVIF"</q-l>,{<q-l>" virtual interface must be set for:"</q-l>,get_full_name(),<q-l>".vif"</q-l>});
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>  <q-w>if</q-w> (!uvm_config_db#(apb_mas_conf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"apb_mas_conf"</q-l>,m_conf)) <q-w>begin</q-w>
<a name="29"><q-n>     29  </q-n></a> `uvm_fatal(<q-l>"NO_CONF"</q-l>,{<q-l>"configuration file must be set"</q-l>,get_full_name(),<q-l>"m_conf"</q-l>});
<a name="30"><q-n>     30  </q-n></a><q-w>end</q-w>
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a>  <q-w>endfunction</q-w>:build_phase
<a name="33"><q-n>     33  </q-n></a>  
<a name="34"><q-n>     34  </q-n></a><q-m>//connect phase</q-m>
<a name="35"><q-n>     35  </q-n></a><q-w>function</q-w> <q-w>void</q-w> connect_phase(uvm_phase phase);
<a name="36"><q-n>     36  </q-n></a>	<q-w>super</q-w>.connect_phase(phase);
<a name="37"><q-n>     37  </q-n></a><q-w>endfunction</q-w>:connect_phase
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a><q-m>//Printing the heirachy of connections of ports is done in end_of_elaboration_phase as shown in below</q-m>
<a name="41"><q-n>     41  </q-n></a><q-w>function</q-w> <q-w>void</q-w> end_of_elaboration_phase(uvm_phase phase);
<a name="42"><q-n>     42  </q-n></a>    <q-w>super</q-w>.end_of_elaboration_phase(phase);
<a name="43"><q-n>     43  </q-n></a>    uvm_top.print_topology();
<a name="44"><q-n>     44  </q-n></a><q-w>endfunction</q-w>:end_of_elaboration_phase
<a name="45"><q-n>     45  </q-n></a> 
<a name="46"><q-n>     46  </q-n></a><q-m>//run phase</q-m>
<a name="47"><q-n>     47  </q-n></a>  <q-w>virtual</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="48"><q-n>     48  </q-n></a>  <q-w>super</q-w>.run_phase(phase);
<a name="49"><q-n>     49  </q-n></a>   
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>   <q-w>forever</q-w> <q-w>begin</q-w>
<a name="52"><q-n>     52  </q-n></a>	     @(<q-a>posedge</q-w> vif.clk);
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>          <q-m>//  if(vif.psel) begin</q-m>
<a name="55"><q-n>     55  </q-n></a>            <q-m>//    while(vif.penable) begin</q-m>
<a name="56"><q-n>     56  </q-n></a>                    <q-m>// create seq_item</q-m>
<a name="57"><q-n>     57  </q-n></a>                   <q-m>// req = apb_seq_item::type_id::create("req");</q-m>
<a name="58"><q-n>     58  </q-n></a>                    
<a name="59"><q-n>     59  </q-n></a>      
<a name="60"><q-n>     60  </q-n></a>                    <q-w>if</q-w>(vif.pwrite == 1)  <q-w>begin</q-w>
<a name="61"><q-n>     61  </q-n></a>                            req_collected.pwrite=1;
<a name="62"><q-n>     62  </q-n></a>                            req_collected.paddr = vif.paddr;
<a name="63"><q-n>     63  </q-n></a>                            req_collected.pwdata = vif.pwdata;
<a name="64"><q-n>     64  </q-n></a>                            <q-m>//@(apb_intf.cb);</q-m>
<a name="65"><q-n>     65  </q-n></a>                            <q-m>// write to analysis port for sampling coverage</q-m>
<a name="66"><q-n>     66  </q-n></a>                          <q-m>//  mntr2cov.write(item);</q-m>
<a name="67"><q-n>     67  </q-n></a>       `uvm_info(get_full_name(),$sformatf(<q-l>" \t paddr=%0h, \t pwdata=%0h,\t prdata=%0h"</q-l>, req_collected.paddr,req_collected.pwdata,req_collected.prdata ),UVM_LOW);
<a name="68"><q-n>     68  </q-n></a>			  
<a name="69"><q-n>     69  </q-n></a>                        <q-w>end</q-w>    
<a name="70"><q-n>     70  </q-n></a>                    
<a name="71"><q-n>     71  </q-n></a>                    <q-w>else</q-w> <q-w>if</q-w>(vif.pwrite == 0) <q-w>begin</q-w>
<a name="72"><q-n>     72  </q-n></a>                            req_collected.pwrite= 0;
<a name="73"><q-n>     73  </q-n></a>                            req_collected.paddr = vif.paddr;
<a name="74"><q-n>     74  </q-n></a>                            req_collected.prdata = vif.prdata;
<a name="75"><q-n>     75  </q-n></a>                         <q-m>//   @(posedge vif.clk);</q-m>
<a name="76"><q-n>     76  </q-n></a>                            <q-m>// send the item to scoreboard for checking</q-m>
<a name="77"><q-n>     77  </q-n></a>                            item_collected_port.write(req_collected);
<a name="78"><q-n>     78  </q-n></a>                        
<a name="79"><q-n>     79  </q-n></a>                            <q-m>// write to analysis port for sampling coverage</q-m>
<a name="80"><q-n>     80  </q-n></a>                          <q-m>//  mntr2cov.write(item);</q-m>
<a name="81"><q-n>     81  </q-n></a>       `uvm_info(get_full_name(),$sformatf(<q-l>" \t paddr=%0h, \t pwdata=%0h,\t prdata=%0h"</q-l>, req_collected.paddr,req_collected.pwdata,req_collected.prdata ),UVM_LOW);
<a name="82"><q-n>     82  </q-n></a>			
<a name="83"><q-n>     83  </q-n></a>                        <q-w>end</q-w>
<a name="84"><q-n>     84  </q-n></a>            <q-m>//        end</q-m>
<a name="85"><q-n>     85  </q-n></a>             <q-m>//   end</q-m>
<a name="86"><q-n>     86  </q-n></a>           
<a name="87"><q-n>     87  </q-n></a>	<q-w>end</q-w> 
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>  <q-w>endtask</q-w>:run_phase
<a name="90"><q-n>     90  </q-n></a> 
<a name="91"><q-n>     91  </q-n></a><q-w>endclass</q-w>:apb_mas_monitor
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>
<a name="94"><q-n>     94  </q-n></a><q-m>/* </q-m>
<a name="95"><q-n>     95  </q-n></a><q-m>  forever begin</q-m>
<a name="96"><q-n>     96  </q-n></a><q-m>     // `uvm_info(get_full_name(),"monitor_start",UVM_LOW);</q-m>
<a name="97"><q-n>     97  </q-n></a><q-m></q-m>
<a name="98"><q-n>     98  </q-n></a><q-m>     @ (posedge vif.clk)</q-m>
<a name="99"><q-n>     99  </q-n></a><q-m>            begin</q-m>
<a name="100"><q-n>     100  </q-n></a><q-m>              req_collected.pwrite = vif.pwrite;</q-m>
<a name="101"><q-n>     101  </q-n></a><q-m>              req_collected.paddr = vif.paddr;</q-m>
<a name="102"><q-n>     102  </q-n></a><q-m>              req_collected.psel = vif.psel;</q-m>
<a name="103"><q-n>     103  </q-n></a><q-m>              req_collected.penable = vif.penable;</q-m>
<a name="104"><q-n>     104  </q-n></a><q-m>      </q-m>
<a name="105"><q-n>     105  </q-n></a><q-m>      if(vif.pwrite==1'b1)begin</q-m>
<a name="106"><q-n>     106  </q-n></a><q-m>              req_collected.pwdata =vif.pwdata;</q-m>
<a name="107"><q-n>     107  </q-n></a><q-m>      end</q-m>
<a name="108"><q-n>     108  </q-n></a><q-m>      else begin</q-m>
<a name="109"><q-n>     109  </q-n></a><q-m></q-m>
<a name="110"><q-n>     110  </q-n></a><q-m>              req_collected.prdata = vif.prdata;</q-m>
<a name="111"><q-n>     111  </q-n></a><q-m>      end</q-m>
<a name="112"><q-n>     112  </q-n></a><q-m>          //    req_collected.print();</q-m>
<a name="113"><q-n>     113  </q-n></a><q-m>      </q-m>
<a name="114"><q-n>     114  </q-n></a><q-m>	   item_collected_port.write(req_collected);</q-m>
<a name="115"><q-n>     115  </q-n></a><q-m>     end</q-m>
<a name="116"><q-n>     116  </q-n></a><q-m>       `uvm_info(get_full_name(),$sformatf(" \t paddr=%0h, \t pwdata=%0h,\t prdata=%0h", req_collected.paddr,req_collected.pwdata,req_collected.prdata ),UVM_LOW);</q-m>
<a name="117"><q-n>     117  </q-n></a><q-m></q-m>
<a name="118"><q-n>     118  </q-n></a><q-m></q-m>
<a name="119"><q-n>     119  </q-n></a><q-m>     // `uvm_info(get_full_name(),"monitor_end",UVM_LOW);</q-m>
<a name="120"><q-n>     120  </q-n></a><q-m>     end</q-m>
<a name="121"><q-n>     121  </q-n></a><q-m>*/</q-m>
<a name="122"><q-n>     122  </q-n></a>
</pre>
</tt>

  
</body>
</html>
